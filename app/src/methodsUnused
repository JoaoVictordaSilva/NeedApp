    private static CodeBlock outputAnnotation(Element targetClass, ExecutableElement method) {
        CodeBlock.Builder builder = CodeBlock.builder();
        if (Preconditions.hasOutputAnnotation(targetClass)) {
            builder.add("else");
            Element outputAnnotation = getOutputAnnotationValue(targetClass);
            if (hasAlias(method)) {
                String[] alias = getAlias(method);
                builder.add("{");
                outputAnnotationWithAlias(builder, alias);
                builder.addStatement("(($L)context).$L($N)", targetClass, outputAnnotation.getSimpleName(), "listApps");
                builder.add("}");
            } else
                builder.addStatement("(($L)context).$L($N)", targetClass, outputAnnotation.getSimpleName(), "listApps");
            builder.indent();

        }

        return builder.build();
    }

    private static boolean hasAlias(ExecutableElement method) {
        return method.getAnnotation(NeedApp.class).alias().length != 0;
    }

    private static String[] getAlias(ExecutableElement method) {
        return method.getAnnotation(NeedApp.class).alias();
    }

    private static void outputAnnotationWithAlias(CodeBlock.Builder builder, String[] apps) {
        builder.addStatement("$N = new String[$L]", "listApps", apps.length);
        for (int index = 0; index < apps.length; index++)
            builder.addStatement("$L[$L] = $S", "listApps", index, apps[index]);
    }
